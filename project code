import pathlib
import cv2
import tkinter as tk
from tkinter import filedialog

def calculate_visible_face_percentage(face_rect, image_width, image_height):
    face_area = (face_rect[2] - face_rect[0]) * (face_rect[3] - face_rect[1])
    total_area = image_width * image_height
    visible_face_percentage = (face_area / total_area) * 100
    return visible_face_percentage

cascade_path = pathlib.Path(cv2._file_).parent.absolute() / "data/haarcascade_frontalface_default.xml"

clf = cv2.CascadeClassifier(str(cascade_path))

root = tk.Tk()
root.withdraw()  # Hide the main window

# Ask the user to select a video file
file_path = filedialog.askopenfilename(title="Select Video File", filetypes=[("Video Files", ".mp4;.avi;*.mkv")])

if not file_path:
    print("No file selected. Exiting.")
else:
    # Use the selected video file
    camera = cv2.VideoCapture(file_path)

    while True:
        _, frame = camera.read()
        if frame is None:
            print("End of video.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = clf.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=5,
            minSize=(30, 30),
            flags=cv2.CASCADE_SCALE_IMAGE
        )

        for (x, y, width, height) in faces:
            visible_face_percentage = calculate_visible_face_percentage((x, y, x + width, y + height), frame.shape[1], frame.shape[0])
            cv2.putText(frame, f"Visibility: {visible_face_percentage:.2f}%", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)
            cv2.rectangle(frame, (x, y), (x + width, y + height), (255, 255, 0), 2)

        cv2.imshow("Faces", frame)
        if cv2.waitKey(1) == ord("q"):
            break

    camera.release()
    cv2.destroyAllWindows()
